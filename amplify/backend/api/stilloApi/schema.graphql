type Chat
  @model
  @auth(
    rules: [
      {
        allow: owner
        identityClaim: "sub"
        ownerField: "clientId"
        operations: [read, create, update, delete]
      }
      {
        allow: owner
        identityClaim: "sub"
        ownerField: "stylistId"
        operations: [read, create, update, delete]
      }
    ]
  ) {
  id: ID!
  stylistId: String
  clientId: String
  messages: AWSJSON
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETE
  NOSHOW
  CLIENTLATE
  STYLISTLATE
  CLIENTCANCELLED
  STYLISTCANCELLED
}

type Appointment
  @model
  @auth(
    rules: [
      {
        allow: owner
        identityClaim: "sub"
        ownerField: "clientId"
        operations: [read, create, update, delete]
      }
      {
        allow: owner
        identityClaim: "sub"
        ownerField: "stylistId"
        operations: [read, create, update, delete]
      }
    ]
  ) {
  id: ID!
  status: AppointmentStatus
  clientId: String
  stylistId: String
  Service: Service @connection
}

type Service
  @model
  @auth(
    rules: [
      {
        allow: owner
        identityClaim: "sub"
        operations: [read, create, update, delete]
      }
    ]
  ) {
  id: ID!
  name: String
  duration: String
  price: String
}

type Album
  @model
  @auth(
    rules: [
      {
        allow: owner
        identityClaim: "sub"
        operations: [read, create, update, delete]
      }
    ]
  ) {
  id: ID!
  albumCoverPhoto: String
  name: String
}
